;基本定数 fundamental values
pi() := 3.141592653589793;
e() := exp(1);

velocity_of_light() := 2.9979250e8{m/s};
electronic_charge() := 1.6021917e-19;{coulomb}
Plancks_constant() := 6.626196e-34; Joule second
Avagadros_number() := 6.022169e26;{nil/kmol}
atomic_mass_unit() := 1.660531e-27{kg};
electron_rest_mass() := 9.109558e-31{kg};
proton_rest_mass() := 1.672614e-27{kg}
magnetic_flux_quantum() := 2.067854e-15;{Tesla m2}
Boltzmanns_constant() := 1.380622e-23{J/K};
gravitational_constant() := 6.6732e-11{(N*m2)/kg2};
permeability_free_space() := 4.0 * pi() * 1.0e-7;{henry/m}
permittivity_free_space() := 8.854e-12;{farads/m}

コンビネーター combinator
Not(f) := lam(x) not(f(x));
And(fx,fy) := lam(x,y) and(fx(x),fy(y));
Or(fx,fy) := lam(x,y) or(fx(x),fy(y));
Implies(fx,fy) := lam(x,y) if_then(fx(x),fy(y));
Curry(f) := lam(y)(lam(x) f(x,y));
Id() := lam(x)x;
K() := lam(x,y)x;
S() := ((lam(x,y,z)x)(lam(x,y,z)z))(y,z);

論理演算子 logical operator
and(x,y) := x & y;
or(x,y) := x | y;
not(x) := ~ x;
implies(x,y) := ((~x)|(x & y));

xor(x,y) := (x|y)&(~(x&y));
all(p,L) :=
	if is_nil(L) then false
	else if length(filter(p,L)) == length(L) then true
	else false;
exists(p,L) :=
	if is_nil(L) then false
	else if p(first(L)) then
		true
	else exists(p,rest(L));

算術関数 basic arithmatic functions
decr(n) := n-1;
incr(n) := n+1;
square(x) := x*x;
cubic(x) := x*x*x;

odd(n) := if mod(n,2) == 0 then false else true;
even(n) := if odd(n) then false else true;

ack(n,m) := if n==0 then m+1
           else if m==0 then ack(n-1,1)
           else ack(n-1,ack(n,m-1));

fact(n) := if n == 0 then 1
		else n * fact(n - 1);

comb(m,n) :=
	if n == 0 then 1
	else if n == m then 1
	else comb(m - 1,n) + comb(m - 1, n - 1);
comb(m,n) := fact(m) / (fact(n)*fact(m-n));
perm(m,n) := comb(m,n) * fact(n);
expt(m,n) := if n == 0 then 1
		else m * expt(m,n - 1);
expt(m,n) :=
	if n == 0 then 1
	else if n == 1 then m
	else if mod(n,2) == 0 then expt(m * m,n / 2)
	else m * expt(m * m,(n - 1) / 2);
gcd(x,y) :=
	if y == 0 then x
	else gcd(y, mod(x,y));Euclid's algorithm

prime_each(x,y) :=
	if gcd(x,y) == 1 then true
	else false;「互いに素」
prime(n) :=
	if n < 2 then false
	else if n < 4 then true
	else if odd(n) then
		prime_aux(n,3)
	else false;素数判定
prime_aux(n,i) :=
	if (n/i) < i then true
	else if prime_each(n,i) then prime_aux(n,i+2)
	else false;


tak(x,y,z) := if x<=y then z
             else tak(tak(x-1,y,z),
                      tak(y-1,z,x),
                      tak(z-1,x,y));
polyvalue(p,x) := if is_nil(p) then 0
                 else first(p)+x*polyvalue(rest(p),x);

isort(x) := if is_nil(x) then nil
           else insert(first(x),isort(rest(x)));

insert(a,x) := if is_nil(x) then cons(a,nil)
              else if a<first(x) then cons(a,x)
              else cons(first(x),insert(a,rest(x)));

qsort(x) := if is_nil(x) then nil
           else append(qsort(smaller(first(x),rest(x))),
                       cons(first(x),
                            qsort(larger(first(x),rest(x)))));

smaller(a,x) := if is_nil(x) then nil
               else if first(x)<a then
                    cons(first(x),smaller(a,(rest(x))))
               else smaller(a,(rest(x)));

larger(a,x) := if is_nil(x) then nil
               else if first(x)>=a then
                    cons(first(x),larger(a,(rest(x))))
               else larger(a,(rest(x)));


fib(n) := if n<2 then n
         else fib(n-1)+fib(n-2);
fib2(n,a,b) := if n==0 then a
              else fib2(n-1,b,a+b);
fib(n) := fib2(n,0,1);


;高階関数 higher order functions
map(f,L) := if is_nil(L) then nil
           else cons(f(first(L)),map(f,rest(L)));

add(a,x) := map(lam(i)a+i,x);

apply(f,LL) :=
	if is_nil(LL) then nil
	else curry(curry(f,first(LL)),rest(LL));

apply(fxy,Lx,Ly) :=
	if is_nil(Lx) then nil
	else if is_nil(Ly) then nil
	else cons(fxy(first(Lx),first(Ly)),apply(fxy,rest(Lx),rest(Ly)));

foldl関数は、左側からリストの要素のあいたに演算子を挟みこんで得られる式を構成する。
foldl(f,L) :=
	if is_nil(L) then nil
	else if is_nil(rest(L)) then first(L)
	else foldl(f,cons(f(first(L),first(rest(L))),rest(rest(L))));

;リスト処理関数 list processing functions
length(L) :=
	if is_nil(L) then 0
	else 1.0 + length(rest(L));リストの長さを求める
append(Lx,Ly) :=
	if is_nil(Lx) then Ly
	else cons(first(Lx),append(rest(Lx),Ly));
flatten(L) :=
	if is_nil(L) then nil
	else if is_list(first(L)) then append(flatten(first(L)),flatten(rest(L)))
	else cons(first(L),flatten(rest(L)));
reverse(x) :=
	if is_nil(x) then nil
	else append(reverse(rest(x)),cons(first(x),nil));
nth(n,L) :=
	if is_nil(L) then error
	else if n == 0 then first(L)
	else nth(n-1,rest(L));n番目の要素を取りだす
last(L) := nth(length(L)-1,L);末尾の要素を取りだす

take(l) :=
	if is_nil(l) then nil
	else cons(first(l),skip(rest(l)));奇数要素を抽出する
skip(l) :=
	if is_nil(l) then nil
	else take(rest(l));偶数要素を抽出する


filter(p,L) :=
	if is_nil(L) then nil
	else if p(first(L)) then
		append([first(L)],filter(p,rest(L)))
	else filter(p,rest(L));filter関数は、与えられたリストの要素のうちで条件を満たすものだけからなるリストを返値とする。

sequence(x,times) :=
	if times < 1 then nil
	else append(cons(x,[]),sequence(x,times-1));

sequence(from,to,skip) :=
	if from > to then nil
	else append(cons(from,[]),sequence(from+skip,to,skip));fromからtoまでskipだけ飛ばしてリストを作る

;行列 Matrix
make_matrix(row,col,default) := map(lam(i) sequence(default,col),sequence(default,row));
max_row(M) := length(M);
max_col(M) := length(first(M));
matrix(row,col) := lam(L) nth(col,nth(row,L));
matrix(row,col,val) := lam(M)(map(nth(0,M)));

;医療用アルゴリズム clinical functions
pH() := 6.1 + log10(HCO3() / (0.03 * PaCO2()));
pH(HCO3,PaCO2) := 6.1 + log10(HCO3 / (0.03 * PaCO2));
osm() := 2 * Na() + glucose() / 18.0 + BUN() / 2.8;血漿浸透圧
BSA() := 0.007184 * expt(height(),0.725) * expt(weight(),0.425);体表面積
QTc() := QT() / sqrt(RR()); QTc時間
Baxter() := coerce(4.0 * weight() * burn_percentage(),1.0{mL/day}); 乳酸加リンゲル液輸液量[mL/day]
BMI() := weight() / square(height()) * 10000;
BMI(weight{kg},height{cm}) := (weight / square(height)) * 10000;


Rohrer() := expt(10,7) * weight() / expt(height(),3); Rohrer index 
Rohrer(weight,height) := expt(10,7) * weight / expt(height,3); Rohrer index 
AG(Na,Cl,HCO3) := Na - Cl - HCO3;
AG() := Na() - Cl() - HCO3();
MCV() := (Hct() * 10.0) / RBC();
pulse_pressure() := systolic() - diastolic();
mean_pressure() := diastolic() + pulse_pressure() / 3.0;

estimated blood volume
EBV(sex) := if eq(sex,male) then 3.29 * BSA() - 1.229
		else if eq(sex,female) then 3.47 * BSA() - 1.954
		else error;

total blood volume: 基準値は 70〜80[mL/kg]である。
TBV() := MCV() / (0.9 * Hct());

target Hb
targetHb(Hb_before_transfusion{g/dL},blood_volume_before_transfusion{mL},Hct_product,volume_product{mL},blood_volume_before_transfusion{mL},volume_product{mL},number_products) :=
	= (
		(Hb_before_transfusion * blood_volume_before_transfusion / 100)
		+
		((
			((Hct_product / 100)  / 2.94) * volume_product / 100)
			*
			number_products)
		 / ((blood_volume_before_transfusion / 100) + (volume_product / 100) * number_products)))

milliequivalents(substance) :=
	(substance{mg} * valence(substance)) / atomic_weight(substance);

plasma volume
plasma_volume(sex) := if eq(sex,male) then BSA() * 1560
			else if eq(sex,female) then BSA() * 1410
			else error;
shock_index() := pulse() / systolic(); normal range: 0.5-0.7
renal failure index
RFI() := urine_Na() / (urine_Cr() / serum_Cr());
VDT(t,Vt,V0) := t * log(2) /(log(Vt / V0)); Schwartz formula
VDT(t{day},V0,Vt) := t * log(2) / log(Vt/V0); volume doubling time
doubling_time(interval{day},initial_diameter,final_diameter) := initial_diameter * (log(2) / 3) * log(initial_diameter,final_diameter);

standardized_death_rate(Lx,Ly) :=
	sum(apply(lam(x,y)x*y,Lx,Ly))/length(Ly);年齢調整死亡率(直接法) Lxは観察集団の各年齢の死亡率,Lyは基準人口の各年齢の人口
;Ccr(age,weight,serum_cr) :=
;	(140-age)*weight*serum_cr/72;クレアチニン・クリアランス creatinine clearance
Ccr() := (urine_cr() * (urine_volume()/(60*24))*1.48) / (serum_cr() * BSA());

Ccr(urine_cr{mg / mL},urine_volume{mL / day},serum_cr{mg / mL}) := (urine_cr * urine_volume) / serum_cr;

sensitivity(true_positive(),false_negative())
	:= true_positive()/(true_positive()+false_negative());
specificity(true_negative(),false_positive())
	:= true_negative()/(true_negative()+false_positive());
sensitivity(true_positive,false_negative)
	:= true_positive/(true_positive+false_negative);
specificity(true_negative,false_positive)
	:= true_negative/(true_negative+false_positive);
DEALE(t,p) := - t/(log(p));DEALE法による期待生存年数の算出(t年生存率p%の場合)

;;;統計関数 statistical functions
max(L) := foldl(lam(i,j) if i<j then j else i ,L);
min(L) := foldl(lam(i,j) if i>j then j else i ,L);
product(L) := foldl(lam(i,j)i*j,L);
sum(L) := foldl(lam(i,j)i+j,L);obsolete
summation(term,a,next,b) :=
	if a > b then 0
	else term(a) + summation(term,next(a),next,b);
integral(f,a,b,dx) := summation(f,a+dx/2,lam(x)x+dx,b)*dx;

mean(L) := sum(L)/length(L);
median(L) := (lam(sortedL) if odd(length(sortedL)) then nth((length(sortedL)-1)/2,sortedL)
		else (nth(length(sortedL)/2,sortedL) + nth(1+(length(sortedL)/2),sortedL))/2 (qsort(L)))(L);
geometric_mean(L) := exp(mean(map(log,L)));
variance(L) := sum(map(square,L))/(length(L)-1) - square(sum(L)/length(L)-1);分散
variance(L) := sum(map(lam(i)square(i-mean(L)),L))/(length(L)-1);分散
variance(L) := (sum(map(lam(i)square(i),L))-(square(sum(L))/length(L)))/(length(L)-1);分散
covariance(Lx,Ly) := sum(apply(lam(x,y)(x-mean(Lx))*(y-mean(Ly)),Lx,Ly))/length(Lx);共分散
covariance(Lx,Ly) := sum(apply(lam(x,y)x*y,Lx,Ly))/length(Lx) - mean(Lx)*mean(Ly);共分散
standard_deviation(L) := sqrt(variance(L));標準偏差 standard deviation
standard_error_mean(SD,n) := SD/sqrt(n);
standard_error_mean(L) := variance(L)/sqrt(length(L));
CV(L) := (standard_deviation(L)/mean(L)) *  100;変動係数
binomial_pdf(n,x,p) := comb(n,x) * expt(p,x) *  expt((1-p),(n-x));二項分布(nは標本数、pは事象Aが生じる確率、xは事象Aが生じた回数)
normal_pdf(z) := (1 / (sqrt(2 * pi()))) * exp(- square(z)/2);標準正規分布の確率密度関数
normal_density(x,mean,var) := (1 / (sqrt(2 * pi())*sqrt(var))) * exp(- square(x-mean)/(2*var));正規分布の確率密度関数
poisson_pdf(x,m) := exp(-m)*expt(m,x)/fact(x);ポワソン分布の確率密度関数(m:期待値)
exp_pdf(x,g) := g * exp(-g*x);指数分布の確率密度関数
chi_square(re,th) :=
      sum(apply(lam(re,th) square(re - th)/th,re,th));
t_value(Lx,Ly) := (mean(Lx)-mean(Ly))/sqrt(((length(Lx)+length(Ly))/(length(Lx)*length(Ly)*(length(Lx)+length(Ly)-2)))*(sum(map(square,Lx)) - (square(sum(Lx))/length(Lx)) + sum(map(square,Ly)) - (square(sum(Ly))/length(Ly))));t統計量
F_value(Lx,Ly) := (variance(Lx)+variance(Ly))/2;


;;;ゲノム関数 genomic function
complement_base(x) :=
	if eq(x,a) then t
	else if eq(x,t) then a
	else if eq(x,g) then c
	else if eq(x,c) then g
	else error;
complement_seq(L) := map(complement_base,L);
amino_table() :=
	[[A,Ala],[C,Cys],[D,Asp],[E,Glu],[F,Phe],[G,Gly],[H,His],[I,Ile],[K,Lys],[L,Leu],[M,Met],[N,Asn],[P,Pro],[Q,Gln],[R,Arg],[S,Ser],[T,Thr],[V,Val],[W,Trp],[Y,Tyr]];

codon_table() :=
	[[[Gly,Gly,Gly,Gly],[Glu,Glu,Asp,Asp],[Ala,Ala,Ala,Ala],[Val,Val,Val,Val]],
	[[Arg,Arg,Ser,Ser],[Lys,Lys,Asn,Asn],[Thr,Thr,Thr,Thr],[Met,Ile,Ile,Ile]],
	[[Arg,Arg,Arg,Arg],[Gln,Gln,His,His],[Pro,Pro,Pro,Pro],[Leu,Leu,Leu,Leu]],
	[[Trp,STOP,Cys,Cys],[STOP,STOP,Tyr,Tyr],[Ser,Ser,Ser,Ser],[Leu,Leu,Phe,Phe]]];

codon2amino(codon) :=
	(lam(L)(nth(nth(2,L),nth(nth(1,L),nth(first(L),codon_table())))))
	(map(lam(i) if eq(i,g) then 0
		else if eq(i,a) then 1
		else if eq(i,c) then 2
		else if eq(i,t) then 3
		else if eq(i,u) then 3
		else error,codon));


is_prine(x) :=
	if (eq(x,a) | eq(x,g)) then true
	else if	(eq(x,t) | eq(x,c)) then false
	else error;
is_pirimidine(x) :=
	if (eq(x,a) | eq(x,g)) then false
	else if	(eq(x,t) | eq(x,c)) then true
	else error;
gap_score() := -2;
similarity_score(a,b) := if eq(a,b) then 1 else -1;
similarity_score(a) := lam(b) if eq(a,b) then 1 else -1;
curry(f) :=
	lam(L) if is_nil(L) then f
		else curry(lam(L) f(first(L)))(rest(L));
curry(f) :=
	(lam(L) f(first(L)))(rest(L));
similarity(Ls,Lt) :=
	(lam(m) ())(length(Ls))
	(lam(n) ())(length(Lt))

Chemical functions
atomic_number(atom) := if eq(atom,H) then 1
			else if eq(atom,He) then 2 else error;

